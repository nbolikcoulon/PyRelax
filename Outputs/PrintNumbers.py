####Module to deal with non-natural numbers and bring them to a printable form###import mathdef CheckFractional(x):        #x in fractional without repetition in the decimals    power = 0    for n in range(15):        if int(10**power * x) == 10**power * x:            break        else:            power += 1                if power != 15:        Num = int(10**power * x)         Den = 10**power        checkGCD = True        while checkGCD:            gcd = math.gcd(Num, Den)                        if gcd == 1:                checkGCD = False            else:                Num = int(Num/gcd)                Den = int(Den/gcd)            if Den == 1:            return str(int(Num))        else:            return str(int(Num)) + '/' + str(int(Den))            #x in fractional with repetition in the decimals    Decimal = str(x)    Decimal = Decimal.split('.')[1][:-1]    #remove last point which might be rounded up        CheckPattern = False    for n in range(len(Decimal) - 1):        for m in range(n+1, len(Decimal)):            if Decimal[m] == Decimal[n]:                incr = m - n                Nincr = int(len(Decimal) - n / incr)                                if m + incr > len(Decimal):                    pass                                else:                                    CheckPattern = True                    for i in range(incr):                        for N in range(1, Nincr):                            try:                                if Decimal[n + i] == Decimal[n+ N*incr + i]:                                    pass                                else:                                    CheckPattern = False                                    break                            except:                                pass                                                    if CheckPattern == False:                            break                                                    if CheckPattern:                    break        if CheckPattern:            Start = n            Size = incr            break                    if CheckPattern:        Decimal = float('0.' + Decimal)        xp = int(10**Start * Decimal)        xpp = int(10**(Start + Size) * Decimal)                Den = 10**(Start+Size) - 10**Start        Num = xpp - xp + Den * int(x)                checkGCD = True        while checkGCD:            gcd = math.gcd(Num, Den)                        if gcd == 1:                checkGCD = False            else:                Num = int(Num/gcd)                Den = int(Den/gcd)                        if Den == 1:            return str(int(Num))        else:            return str(int(Num)) + '/' + str(int(Den))            else:        return Nonedef PrintScalars(x_in):        #x in a scalar    x = round(x_in, 15)        #x is an integer    if int(x) == x:        return str(x)        #x in fractional    checkFrac = CheckFractional(x)    if checkFrac != None:        return checkFrac        #x can be expressed as a squarre root    for n in range(2, 50):        check = CheckFractional(x**n)        if check != None:            return '(' + check + ')^1/' + str(n)            #didn't manage to simplify    return x                                