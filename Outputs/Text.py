import configparserdef write_spinsystem(SpinSystem):    """    writes informations about the spin system.    Parameters    ----------    SpinSystem : TYPE: spin_system        DESCRIPTION.    Returns    -------    None.    """        cfg = configparser.ConfigParser()        cfg['NAME'] = {'Spin system': SpinSystem.name}        for label in SpinSystem.nuclei.keys():        cfg[label] = {}        if SpinSystem.nuclei[label].geometry.coordinates != []:            cfg[label]['x'] = str(SpinSystem.nuclei[label].geometry.coordinates[0])            cfg[label]['y'] = str(SpinSystem.nuclei[label].geometry.coordinates[1])            cfg[label]['z'] = str(SpinSystem.nuclei[label].geometry.coordinates[2])                    if SpinSystem.nuclei[label].CSA.symmetry == 'isotropic':            cfg[label]['CSA'] = f'isotropic: {SpinSystem.nuclei[label].CSA.csa}'            cfg[label]['CSA orient'] = ''        elif SpinSystem.nuclei[label].CSA.symmetry == 'axial':            cfg[label]['CSA'] = f'axial: {SpinSystem.nuclei[label].CSA.csa}'            cfg[label]['CSA orient'] = f'{[SpinSystem.nuclei[label].CSA.orientation[0], SpinSystem.nuclei[label].CSA.orientation[1], SpinSystem.nuclei[label].CSA.orientation[2]]}'        else:            cfg[label]['CSA'] = f'asymmetric: sigma_1 = {SpinSystem.nuclei[label].CSA.csa[0]}, sigma_2 = {SpinSystem.nuclei[label].CSA.csa[1]}'            cfg[label]['CSA orient - 1'] = f'{[SpinSystem.nuclei[label].CSA.orientation[0][0], SpinSystem.nuclei[label].CSA.orientation[0][1], SpinSystem.nuclei[label].CSA.orientation[0][2]]}'            cfg[label]['CSA orient - 2'] = f'{[SpinSystem.nuclei[label].CSA.orientation[1][0], SpinSystem.nuclei[label].CSA.orientation[1][1], SpinSystem.nuclei[label].CSA.orientation[1][2]]}'                    cfg[label]['EFG'] = str(SpinSystem.nuclei[label].EFG.EFG_asymmetry)                cfg['SCALAR COUPLINGS'] = {}    atoms = list(SpinSystem.nuclei.keys())    for nuclei1 in range(len(SpinSystem.nuclei) - 1):        for nuclei2 in range(nuclei1 + 1, len(SpinSystem.nuclei)):            J = SpinSystem.coupling_constants.get_coupling_constant(list(SpinSystem.nuclei.keys())[nuclei1],                                                                    list(SpinSystem.nuclei.keys())[nuclei2])            if J != 0.0:                cfg['SCALAR COUPLINGS'][f'{atoms[nuclei1]} - {atoms[nuclei2]}'] = str(J)                    cfg['BASIS'] = {}    cfg['BASIS']['Type'] = SpinSystem.basis.basis_type    cfg['BASIS']['Operators'] = ''    for Op in SpinSystem.basis.basis.keys():        cfg['BASIS']['Operators'] += f'{Op}, '    cfg['BASIS']['Operators'] = cfg['BASIS']['Operators'][:-2]                    with open(f'{SpinSystem.dir_out_name}/SpinSystem.toml', 'w') as f:        cfg.write(f)