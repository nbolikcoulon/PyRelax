import numpy as npfrom scipy import constants######################################################                                                   ##                      Physics                      ##                                                   ######################################################hbar = constants.hbarmu0 = constants.mu_0GyromagneticRatios = {    "1H":  26.7522128e07,    "2H":  41.065e6,    "15N": -2.71261804e07,    "13C": 6.728284e07,    "19F": 25.18148e07,    "31P": 10.8394e07,}spin_quantum_number = {    "1H":  '1/2',    "2H":  '1',    "15N": '1/2',    "13C": '1/2',    "19F": '1/2',    "31P": '1/2',}            # def DipolarConstant(SpinSystem, Nuclei1, Nuclei2):    #     Gamma1 = GyromagneticRatios[SpinSystem.Nuclei[Nuclei1]]#     Gamma2 = GyromagneticRatios[SpinSystem.Nuclei[Nuclei2]]    #     coordinate1 = SpinSystem.Coordinates[Nuclei1]#     coordinate2 = SpinSystem.Coordinates[Nuclei2]#     r12 = np.sqrt(coordinate1[0]**2 * coordinate2[0]**2 + coordinate1[1]**2 * coordinate2[1]**2 + coordinate1[2]**2 * coordinate2[2]**2)    #     dDD = -mu0/(4.*np.pi) * hbar * Gamma1 * Gamma2 / r12**3    #     return dDD            #####################################################################                                                                  ##                      Spin operator matrices                      ##                                                                  ######################################################################S = 1/2def opE_2():    """    Identity operator for spin half    """    # Identity operator for spin half    E = np.zeros( (2, 2), 'complex64' )    E[0, 0] = 1.    E[1, 1] = 1.        return E    def opIx_2():    """    operator Ix for spin half    """    Ix = np.zeros( (2, 2), 'complex64' )    Ix[0, 1] = 1./2.    Ix[1, 0] = 1./2.        return Ixdef opIy_2():    """    operator Iy for spin half    """    Iy = np.zeros( (2, 2), 'complex64' )    Iy[1, 0] = -1./(2.*1j)    Iy[0, 1] = 1./(2.*1j)        return Iydef opIz_2():    """    operator Iz for spin half    """    Iz = np.zeros( (2, 2), 'complex64' )    Iz[0, 0] = 1./2.    Iz[1, 1] = -1./2.        return Izdef ope_2():    """    Identity operator for spin half in shift operator basis    """    E = np.zeros( (2, 2), 'complex64' )    E[0, 0] = 1/np.sqrt(2.0)    E[1, 1] = 1/np.sqrt(2.0)        return Edef opI0_2():    """    operator I0 for spin half    """    I0 = np.zeros( (2, 2), 'complex64' )    I0[0, 0] = 1./np.sqrt(2.0)    I0[1, 1] = -1./np.sqrt(2.0)        return I0def opIp_2():    """    operator I+ for spin half    """    Ip = np.zeros( (2, 2), 'complex64' )    Ip[0, 1] = 1.        return Ipdef opIm_2():    """    operator I- for spin half    """    Im = np.zeros( (2, 2), 'complex64' )    Im[1, 0] = 1.        return Imdef opIa_2():    """    operator Ialpha for spin half    """    Ia = np.zeros( (2, 2), 'complex64' )    Ia[0, 0] = 1.        return Iadef opIb_2():    """    operator Ibeta for spin half    """    Ib = np.zeros( (2, 2), 'complex64' )    Ib[1, 1] = 1.        return Ib#S = 1def opE_3():    """    Identity operator for spin-1    """    E = np.zeros( (3, 3), 'complex64' )    E[0, 0] = 1.    E[1, 1] = 1.    E[2, 2] = 1.        return E def opIx_3():    """    operator Ix for spin-1    """    Ix = np.zeros( (3, 3), 'complex64' )    Ix[1, 0] = 1./np.sqrt(2.)    Ix[0, 1] = 1./np.sqrt(2.)    Ix[2, 1] = 1./np.sqrt(2.)    Ix[1, 2] = 1./np.sqrt(2.)        return Ixdef opIy_3():    """    operator Iy for spin-1    """    Iy = np.zeros( (3, 3), 'complex64' )    Iy[1, 0] = -1./(1j*np.sqrt(2.))    Iy[0, 1] = 1./(1j*np.sqrt(2.))    Iy[2, 1] = -1./(1j*np.sqrt(2.))    Iy[1, 2] = 1./(1j*np.sqrt(2.))        return Iydef opIz_3():    """    operator Iz for spin-1    """    Iz = np.zeros( (3, 3), 'complex64' )    Iz[0, 0] = 1.    Iz[2, 2] = -1.        return Izdef opIp_3():    """    operator I+ for spin half    """    Ip = np.zeros( (3, 3), 'complex64' )    Ip[0, 1] = np.sqrt(2.)    Ip[1, 2] = np.sqrt(2.)        return Ipdef opIm_3():    """    operator I- for spin half    """    Im = np.zeros( (3, 3), 'complex64' )    Im[1, 0] = np.sqrt(2.)    Im[2, 1] = np.sqrt(2.)        return Imdef opIm1_3():    """    operator I- for spin half    """    Im1 = np.zeros( (3, 3), 'complex64' )    Im1[0, 0] = 1.        return Im1def opI0_3():    """    operator I- for spin half    """    I0 = np.zeros( (3, 3), 'complex64' )    I0[1, 1] = 1.        return I0def opIp1_3():    """    operator I+ for spin half    """    Ip1 = np.zeros( (3, 3), 'complex64' )    Ip1[2, 2] = 1.        return Ip1OpDict_2 = {'opE_2': opE_2(),            'opIx_2': opIx_2(),            'opIy_2': opIy_2(),            'opIz_2': opIz_2(),            'opIe_2': ope_2(),            'opI0_2': opI0_2(),            'opI+_2': opIp_2(),            'opI-_2': opIm_2(),            'opIa_2': opIa_2(),            'opIb_2': opIb_2()}    OpDict_3 = {'opE_3': opE_3(),            'opIx_3': opIx_3(),            'opIy_3': opIy_3(),            'opIz_3': opIz_3(),            'opI+_3': opIp_3(),            'opI-_3': opIm_3(),            'opIm_3': opIm1_3(),            'opI0_3': opI0_3(),            'opIp_3': opIp1_3()}    OpDict = {'1/2': OpDict_2,          '1': OpDict_3}######################################################################                                                                   ##                      State operator matrices                      ##                                                                   #######################################################################S = 1/2def sIa():    """    state alpha    """    return np.asarray([1., 0.])def sIb():    """    state beta    """    return np.asarray([0., 1.])#S = 1def sIp():    """    state +    """    return np.asarray([1., 0., 0.])def sI0():    """    state 0    """    return np.asarray([0., 1., 0.])def sIm():    """    state -    """    return np.asarray([0., 0., 1.])