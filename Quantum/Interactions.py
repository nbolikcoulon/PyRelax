###This modules deals with hamiltonians for spin interactions#Hamiltonian are given in units of B0### import sys, osimport numpy as npsys.path.insert(1, '../NMR')import constants as cstimport SpinOperators#####################################################                                                  ##                      Zeeman                      ##                                                  #####################################################def ZeemanH(SpinSystem):           Hzeeman = 0.        for Label, Isotope in SpinSystem.Nuclei.items():                opI = SpinOperators.SpinOp(SpinSystem, 'z', Label, Normalize = True)                Hzeeman += cst.GyromagneticRatios[Isotope] * opI            return Hzeeman##############################################################                                                           ##                      Scalar Coupling                      ##                                                           ##############################################################def ScalarCouplingH(SpinSystem):        Hcoupling = 0.        if len(SpinSystem.Nuclei) < 2:        return 0.0        for nuclei1 in range(len(SpinSystem.Nuclei) - 1):        for nuclei2 in range(nuclei1 + 1, len(SpinSystem.Nuclei)):            J12 = SpinSystem.CouplingConstants[nuclei1, nuclei2]                        atoms = list(SpinSystem.Nuclei.keys())            op1 = SpinOperators.SpinOp(SpinSystem, 'z', atoms[nuclei1], Normalize = False)            op2 = SpinOperators.SpinOp(SpinSystem, 'z', atoms[nuclei2], Normalize = False)                        op_prod = SpinOperators.NormalizeOperator(SpinSystem, op1 @ op2)                        Hcoupling += 2.*np.pi*J12 * op_prod                return Hcoupling    ############################################################                                                         ##                      Dipole-Dipole                      ##                                                         ############################################################    def DDtensors(SpinSystem, Nuclei1, Nuclei2):    Isotope1 = SpinSystem.Nuclei[Nuclei1]    Isotope2 = SpinSystem.Nuclei[Nuclei2]        Tensors = dict()        #tensors are writen T[p, q] with q the coherence order and qpan index    Tensors['2, 0'] = 1./2. * SpinOperators.SpinOp(SpinSystem, '+', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '+', Nuclei2, Normalize = False)    Tensors['1, 0'] = -1./2 * SpinOperators.SpinOp(SpinSystem, 'z', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '+', Nuclei2, Normalize = False)    Tensors['1, 1'] = -1./2 * SpinOperators.SpinOp(SpinSystem, '+', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei2, Normalize = False)    Tensors['0, -1'] = -1./(2.*np.sqrt(6.)) * SpinOperators.SpinOp(SpinSystem, '-', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '+', Nuclei2, Normalize = False)    Tensors['0, 0'] = 2./(np.sqrt(6.)) * SpinOperators.SpinOp(SpinSystem, 'z', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei2, Normalize = False)    Tensors['0, 1'] = -1./(2.*np.sqrt(6.)) * SpinOperators.SpinOp(SpinSystem, '+', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '-', Nuclei2, Normalize = False)    Tensors['-1, 0'] = 1./2 * SpinOperators.SpinOp(SpinSystem, 'z', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '-', Nuclei2, Normalize = False)    Tensors['-1, 1'] = 1./2 * SpinOperators.SpinOp(SpinSystem, '-', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei2, Normalize = False)    Tensors['-2, 0'] = 1./2. * SpinOperators.SpinOp(SpinSystem, '-', Nuclei1, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '-', Nuclei2, Normalize = False)        Eigenvalues = dict()    Eigenvalues['2, 0'] = ['w' + Nuclei1 + '+w' + Nuclei2, cst.GyromagneticRatios[Isotope1] + cst.GyromagneticRatios[Isotope2]]    Eigenvalues['1, 0'] = ['w' + Nuclei2, cst.GyromagneticRatios[Isotope2]]    Eigenvalues['1, 1'] = ['w' + Nuclei1, cst.GyromagneticRatios[Isotope1]]    Eigenvalues['0, -1'] = ['w' + Nuclei2 + '-w' + Nuclei1, cst.GyromagneticRatios[Isotope2] - cst.GyromagneticRatios[Isotope1]]    Eigenvalues['0, 0'] = ['0', 0.0]    Eigenvalues['0, 1'] = ['w' + Nuclei1 + '-w' + Nuclei2, cst.GyromagneticRatios[Isotope1] - cst.GyromagneticRatios[Isotope2]]    Eigenvalues['-1, 0'] = ['w' + Nuclei2, cst.GyromagneticRatios[Isotope2]]    Eigenvalues['-1, 1'] = ['w' + Nuclei1, cst.GyromagneticRatios[Isotope1]]    Eigenvalues['-2, 0'] = ['w' + Nuclei1 + '+w' + Nuclei2, cst.GyromagneticRatios[Isotope1] + cst.GyromagneticRatios[Isotope2]]    return Tensors, Eigenvalues##################################################                                               ##                      CSA                      ##                                               ##################################################def CSAtensors(SpinSystem, Nuclei):    Isotope = SpinSystem.Nuclei[Nuclei]    Tensors = dict()        #tensors are writen T[p, q] with q the coherence order and p an index    Tensors['2, 0'] = 0. * SpinOperators.SpinOp(SpinSystem, 'E', Nuclei, Normalize = False)    Tensors['1, 0'] = -1./2. * SpinOperators.SpinOp(SpinSystem, '+', Nuclei, Normalize = False)    Tensors['0, 0'] = 2./np.sqrt(6.) * SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False)    Tensors['-1, 0'] = 1./2. * SpinOperators.SpinOp(SpinSystem, '-', Nuclei, Normalize = False)    Tensors['-2, 0'] = 0. * SpinOperators.SpinOp(SpinSystem, 'E', Nuclei, Normalize = False)        Eigenvalues = dict()    Eigenvalues['2, 0'] = ['2w' + Nuclei, 2.*cst.GyromagneticRatios[Isotope]]    Eigenvalues['1, 0'] = ['w' + Nuclei, cst.GyromagneticRatios[Isotope]]    Eigenvalues['0, 0'] = ['0', 0.]    Eigenvalues['-1, 0'] = ['w' + Nuclei, cst.GyromagneticRatios[Isotope]]    Eigenvalues['-2, 0'] = ['2w' + Nuclei, 2.*cst.GyromagneticRatios[Isotope]]    return Tensors, Eigenvalues##########################################################                                                       ##                      Quadrupolar                      ##                                                       ##########################################################def Qtensors(SpinSystem, Nuclei):    Isotope = SpinSystem.Nuclei[Nuclei]    Tensors = dict()        #tensors are writen T[p, q] with q the coherence order and 0 an index    Tensors['2, 0'] = 1./2. * SpinOperators.SpinOp(SpinSystem, '+', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '+', Nuclei, Normalize = False)    Tensors['1, 0'] = -1./2. * (SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '+', Nuclei, Normalize = False) \                                + SpinOperators.SpinOp(SpinSystem, '+', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False))    Tensors['0, 0'] = 1./np.sqrt(6.0) * (2. * SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False) \                                         - SpinOperators.SpinOp(SpinSystem, 'x', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'x', Nuclei, Normalize = False) \                                         - SpinOperators.SpinOp(SpinSystem, 'y', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'y', Nuclei, Normalize = False))    Tensors['-1, 0'] = 1./2. * (SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '-', Nuclei, Normalize = False) \                                + SpinOperators.SpinOp(SpinSystem, '-', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, 'z', Nuclei, Normalize = False))    Tensors['-2, 0'] = 1./2. * SpinOperators.SpinOp(SpinSystem, '-', Nuclei, Normalize = False) @ SpinOperators.SpinOp(SpinSystem, '-', Nuclei, Normalize = False)        Eigenvalues = dict()    Eigenvalues['2, 0'] = ['2w' + Nuclei, 2.*cst.GyromagneticRatios[Isotope]]    Eigenvalues['1, 0'] = ['w' + Nuclei, cst.GyromagneticRatios[Isotope]]    Eigenvalues['0, 0'] = ['0', 0.]    Eigenvalues['-1, 0'] = ['w' + Nuclei, cst.GyromagneticRatios[Isotope]]    Eigenvalues['-2, 0'] = ['2w' + Nuclei, 2.*cst.GyromagneticRatios[Isotope]]    return Tensors, Eigenvalues###########################################################                                                        ##                      Paramagnetic                      ##                                                        ###########################################################