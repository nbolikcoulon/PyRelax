"""Module related to spectral density functionIt contains simple models:    - no internal motions and different symmetry of the global tumbling diffusion tensor    - model free    - extended model freeIt also contains function to define other spectral densities"""import numpy as npdef Lorentz(w, tau):    return tau/(1. (w * tau)**2)def IsotropicTumbling(w, DynamicArgs):    tc = DynamicArgs['tc']    return 2./5 * tc / ( 1. + (w * tc)**2)def AxialTumbling(w, DynamicArgs):    """    See Eq. 4 of N.Tjandra, S.E.Feller, R.W.Pastor, A.Bax, J.Am.Chem.Soc. 117, 12562 (1995)    """    Angle, Dparallel, Dperp = DynamicArgs['Angle'], DynamicArgs['Dparallel'], DynamicArgs['Dperp']        A1 = (3./2. * np.cos(Angle)**2 - 1./2.)**2    A2 = 3. * np.sin(Angle)**2 * np.cos(Angle)**2    A3 = 3./4. * np.sin(Angle)**4    A = [A1, A2, A3]        tau1 = 1./(6. * Dperp)    tau2 = 1./(Dparallel + 5.*Dperp)    tau3 = 1./(4.*Dparallel + 2*Dperp)    tau = [tau1, tau2, tau3]        J = 0.    for i in range(3):        J += 2./5. * A[i] * Lorentz(w, tau[i])            return J    